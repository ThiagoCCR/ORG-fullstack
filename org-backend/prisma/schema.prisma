generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Finance {
  id        Int       @id(map: "Finance_pk") @default(autoincrement())
  date      DateTime  @db.Date
  userId    Int
  type      String
  class     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  name      String
  User      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Finance_fk0")
}

model Humor {
  id        Int       @id(map: "Humor_pk") @default(autoincrement())
  userId    Int       @default(autoincrement())
  day       DateTime  @db.Date
  humor     String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  User      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Humor_fk0")
}

model Session {
  id        Int       @id(map: "sessions_pk") @default(autoincrement())
  userId    Int       @default(autoincrement())
  token     String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  User      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Session_fk0")
}

model User {
  id        Int       @id(map: "users_pk") @default(autoincrement())
  name      String    @db.VarChar(50)
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  Finance   Finance[]
  Habit     Habit[]
  Humor     Humor[]
  Session   Session[]
}

model Habit {
  id        Int        @id(map: "Habit_pk") @default(autoincrement())
  name      String     @db.VarChar(255)
  userId    Int
  createdAt DateTime   @default(now())
  updatedAt DateTime?
  User      User       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Habit_fk0")
  HabitDay  HabitDay[]
  HabitLog  HabitLog[]
}

model HabitDay {
  id        Int        @id(map: "HabitDay_pk") @default(autoincrement())
  habitId   Int
  day       Int
  createdAt DateTime   @default(now())
  updatedAt DateTime?
  Habit     Habit      @relation(fields: [habitId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "HabitDay_fk0")
  HabitLog  HabitLog[]
}

model HabitLog {
  id        Int       @id(map: "HabitLog_pk") @default(autoincrement())
  habitId   Int
  dayId     Int
  done      Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  date      String
  HabitDay  HabitDay  @relation(fields: [dayId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "HabitLog_fk1")
  Habit     Habit     @relation(fields: [habitId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "HabitLog_fk0")
}
